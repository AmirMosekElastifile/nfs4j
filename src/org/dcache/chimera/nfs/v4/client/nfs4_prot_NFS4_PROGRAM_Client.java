/*
 * Automatically generated by jrpcgen 1.0.7 on 8/31/09 12:28 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package org.dcache.chimera.nfs.v4.client;
import java.io.IOException;

import java.net.InetAddress;
import org.dcache.chimera.nfs.v4.xdr.COMPOUND4args;
import org.dcache.chimera.nfs.v4.xdr.COMPOUND4res;
import org.dcache.chimera.nfs.v4.xdr.nfs4_prot;
import org.dcache.xdr.OncRpcException;
import org.dcache.xdr.OncRpcClient;
import org.dcache.xdr.RpcAuth;
import org.dcache.xdr.RpcAuthTypeUnix;
import org.dcache.xdr.RpcCall;
import org.dcache.xdr.XdrTransport;
import org.dcache.xdr.XdrVoid;

/**
 * The class <code>nfs4_prot_NFS4_PROGRAM_Client</code> implements the client stub proxy
 * for the NFS4_PROGRAM remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class nfs4_prot_NFS4_PROGRAM_Client {

    private final RpcCall client;
    private final OncRpcClient rpcClient;

    /**
     * Constructs a <code>nfs4_prot_NFS4_PROGRAM_Client</code> client stub proxy object
     * from which the NFS4_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public nfs4_prot_NFS4_PROGRAM_Client(InetAddress host, int protocol)
           throws OncRpcException, IOException {
           this(host, 2049, protocol);
    }

    /**
     * Constructs a <code>nfs4_prot_NFS4_PROGRAM_Client</code> client stub proxy object
     * from which the NFS4_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public nfs4_prot_NFS4_PROGRAM_Client(InetAddress host, int port, int protocol)
           throws OncRpcException, IOException {

        rpcClient = new OncRpcClient(host, protocol, port);
        XdrTransport transport;
        transport = rpcClient.connect();

        RpcAuth credential = new RpcAuthTypeUnix(3750, 1000, new int[]{1000}, (int) (System.currentTimeMillis() / 1000), "nairi");
        client = new RpcCall(100003, 4, credential, transport);
    }

    /**
     * Constructs a <code>nfs4_prot_NFS4_PROGRAM_Client</code> client stub proxy object
     * from which the NFS4_PROGRAM remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
//    public nfs4_prot_NFS4_PROGRAM_Client(OncRpcClient client)
//           throws OncRpcException, IOException {
//        super(client);
//    }

    /**
     * Constructs a <code>nfs4_prot_NFS4_PROGRAM_Client</code> client stub proxy object
     * from which the NFS4_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
//    public nfs4_prot_NFS4_PROGRAM_Client(InetAddress host, int program, int version, int protocol)
//           throws OncRpcException, IOException {
//        super(host, program, version, 0, protocol);
//    }

    /**
     * Constructs a <code>nfs4_prot_NFS4_PROGRAM_Client</code> client stub proxy object
     * from which the NFS4_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
//    public nfs4_prot_NFS4_PROGRAM_Client(InetAddress host, int program, int version, int port, int protocol)
//           throws OncRpcException, IOException {
//        super(host, program, version, port, protocol);
//    }

    /**
     * Call remote procedure NFSPROC4_NULL_4.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NFSPROC4_NULL_4()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        XdrVoid result$ = XdrVoid.XDR_VOID;

        client.call(nfs4_prot.NFSPROC4_NULL_4, args$, result$);
    }

    /**
     * Call remote procedure NFSPROC4_COMPOUND_4.
     * @param arg1 parameter (of type COMPOUND4args) to the remote procedure call.
     * @return Result from remote procedure call (of type COMPOUND4res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public COMPOUND4res NFSPROC4_COMPOUND_4(COMPOUND4args arg1)
           throws OncRpcException, IOException {
        COMPOUND4res result$ = new COMPOUND4res();

        client.call(nfs4_prot.NFSPROC4_COMPOUND_4, arg1, result$);

        return result$;
    }

    public XdrTransport getTransport() {
        return client.getTransport();
    }

    public void close() throws IOException {
        rpcClient.close();
    }
}
// End of nfs4_prot_NFS4_PROGRAM_Client.java
