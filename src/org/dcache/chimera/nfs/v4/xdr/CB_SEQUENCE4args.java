/*
 * Automatically generated by jrpcgen 1.0.7 on 2/21/09 1:22 AM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package org.dcache.chimera.nfs.v4.xdr;
import org.dcache.chimera.nfs.v4.*;
import org.dcache.xdr.*;
import java.io.IOException;

public class CB_SEQUENCE4args implements XdrAble {
    public sessionid4 csa_sessionid;
    public sequenceid4 csa_sequenceid;
    public slotid4 csa_slotid;
    public slotid4 csa_highest_slotid;
    public boolean csa_cachethis;
    public referring_call_list4 [] csa_referring_call_lists;

    public CB_SEQUENCE4args() {
    }

    public CB_SEQUENCE4args(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        xdrDecode(xdr);
    }

    public void xdrEncode(XdrEncodingStream xdr)
           throws OncRpcException, IOException {
        csa_sessionid.xdrEncode(xdr);
        csa_sequenceid.xdrEncode(xdr);
        csa_slotid.xdrEncode(xdr);
        csa_highest_slotid.xdrEncode(xdr);
        xdr.xdrEncodeBoolean(csa_cachethis);
        { int $size = csa_referring_call_lists.length; xdr.xdrEncodeInt($size); for ( int $idx = 0; $idx < $size; ++$idx ) { csa_referring_call_lists[$idx].xdrEncode(xdr); } }
    }

    public void xdrDecode(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        csa_sessionid = new sessionid4(xdr);
        csa_sequenceid = new sequenceid4(xdr);
        csa_slotid = new slotid4(xdr);
        csa_highest_slotid = new slotid4(xdr);
        csa_cachethis = xdr.xdrDecodeBoolean();
        { int $size = xdr.xdrDecodeInt(); csa_referring_call_lists = new referring_call_list4[$size]; for ( int $idx = 0; $idx < $size; ++$idx ) { csa_referring_call_lists[$idx] = new referring_call_list4(xdr); } }
    }

}
// End of CB_SEQUENCE4args.java
